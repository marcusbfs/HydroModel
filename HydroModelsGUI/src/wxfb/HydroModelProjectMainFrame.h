#ifndef __HydroModelProjectMainFrame__
#define __HydroModelProjectMainFrame__

/**
@file
Subclass of MainFrame, which is generated by wxFormBuilder.
*/

#include "HydroModelGUI.h"

#include "HydroModelsUIAPI.h" // model api
#include <mutex>

#define FLAGTYPE unsigned int

//// end generated include

/** Implementing MainFrame */
class HydroModelProjectMainFrame : public MainFrame, public HydroModelsObserver
{
public:
	// == enum ==
	static const FLAGTYPE Empty = 0;
	static const FLAGTYPE Modified = 1 << 1;
	static const FLAGTYPE Saved = 1 << 2;
	static const FLAGTYPE Calculating = 1 << 3;

protected:
	// Handlers for MainFrame events.
	void OpenFileFromMenu(wxCommandEvent& event);
	void SaveFileFromMenu(wxCommandEvent& event);
	void SaveAsFileFromMenu(wxCommandEvent& event);
	void RunFromMenu(wxCommandEvent& event);

public:
	/** Constructor */
	HydroModelProjectMainFrame(wxWindow* parent);
	//// end generated class members
private:
	// == methods ==
	// check if file was modified
	bool checkIfModified();
	// check if theres any content on scintilla text editor
	bool isThereContentOnTextEditor() const;
	// load file from path into scintilla
	bool loadFileFromPathToScintilla(const wxString& path);
	// save scintilla content to path 
	bool saveScintillaContentToPath(const wxString& path);
	// set flag
	void setFlag(const FLAGTYPE& flag);
	// remove flag
	void removeFlag(const FLAGTYPE& flag);
	// check if has flag
	bool hasFlag(const FLAGTYPE& flag) const;
	// set  message in status bar 
	void setStatusBarMessage(const wxString& msg, const int& field);
	// set temporary message in status bar for INT ms
	void setTimedStatusBarMessage(const wxString& msg, const int& time);
	// initialize scintilla style
	void initializeScintilla();
	// initialize notebook and its panels
	void initializeNotebookAndPanels();
	// set content to output editor
	void setOutputContent();
	// do calculation work
	void doCalcWork();
	// update called from observable
	virtual void update() override;
	// update formatted output
	void updateFormattedOutput();
	// convert double to string
	std::string doubleToStr(const double& value) const;
	// event handler to when calculation is completed
	void OnCalculationCompleted(wxCommandEvent& event);
	// close program event
	void CloseMainProgram(wxCloseEvent& event);

	// == properties ==
	const unsigned int m_timeOfMessages = 1000;
	// Stores curren path
	FLAGTYPE m_flags = Saved;
	// stores current path file
	wxString m_currentFilePath = "";
	// stores saved content: when it is opened or saved
	wxString m_saved_content = "";
	// stores output content content
	wxString m_output_content = "";
	// mutex for status bar
	std::mutex m_mutex_statusbar;
	// mutex for output calculations
	std::mutex m_mutex_output;
	// mutex for chaning flags
	std::mutex m_mutex_flags;
	// this thread id
	const std::thread::id main_thread_id = std::this_thread::get_id();
	// hydromodel api
	HydroModelsUIAPI m_hydromodels;
};

#endif // __HydroModelProjectMainFrame__
